<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.warehouse.mapper.ProductMapper">

    <!--
      //查询商品总行数的方法
      public int selectProductCount(Product product)
    -->
    <select id="selectProductCount" resultType="integer">
        select count(*) from
        product t1, store t2, product_brand t3, product_type t4, unit t7
        where t1.store_id = t2.store_id and t1.brand_id = t3.brand_id
        and t1.type_id = t4.type_id
        and t1.unit_id = t7.unit_id
        <if test="storeId != null">
            and t1.store_id = #{storeId}
        </if>
        <if test="productName != null and productName != ''">
            and t1.product_name like concat('%',#{productName},'%')
        </if>
        <if test="brandName != null and brandName != ''">
            and t3.brand_name like concat('%', #{brandName}, '%')
        </if>
        <if test="typeName != null and typeName != ''">
            and t4.type_name like concat('%', #{typeName}, '%')
        </if>
        <if test="upDownState != null and upDownState != ''">
            and t1.up_down_state = #{upDownState}
        </if>
        <!--
          如果方法参数Product对象的isOverDate属性值为1(查询已过期商品),则查询
          当前时间大于product表中supp_date列的时间的商品;
          反之如果方法参数Product对象的isOverDate属性值为0(查询未过期商品),则
          查询当前时间小于product表中supp_date列的时间的商品;
        -->
        <if test="isOverDate != null and isOverDate != '' and isOverDate==1">
            and date_format(now(), '%y-%m-%d') &gt; t1.best_before_date
        </if>
        <if test="isOverDate != null and isOverDate != '' and isOverDate==0">
            and date_format(now(), '%y-%m-%d') &lt; t1.best_before_date
        </if>
    </select>

    <!--
      //分页查询商品的方法
      public List<Product> selectProductPage(@Param("page") Page page, @Param("product") Product product)
    -->
    <select id="selectProductPage" resultType="com.warehouse.entity.Product">
        select t1.*,
               t2.store_name,
               t3.brand_name,
               t4.type_name,
               t7.unit_name
        from product t1,
             store t2,
             product_brand t3,
             product_type t4,
             unit t7
        where t1.store_id = t2.store_id
          and t1.brand_id = t3.brand_id
          and t1.type_id = t4.type_id
          and t1.unit_id = t7.unit_id
        <if test="product.storeId != null">
            and t1.store_id = #{product.storeId}
        </if>
        <if test="product.productName != null and product.productName != ''">
            and t1.product_name like concat('%', #{product.productName}, '%')
        </if>
        <if test="product.brandName != null and product.brandName != ''">
            and t3.brand_name like concat('%', #{product.brandName}, '%')
        </if>
        <if test="product.typeName != null and product.typeName != ''">
            and t4.type_name like concat('%', #{product.typeName}, '%')
        </if>
        <if test="product.upDownState != null and product.upDownState != ''">
            and t1.up_down_state = #{product.upDownState}
        </if>
        <if test="product.isOverDate != null and product.isOverDate != '' and product.isOverDate == 1">
            and date_format(now(), '%y-%m-%d') &gt; t1.best_before_date
        </if>
        <if test="product.isOverDate != null and product.isOverDate != '' and product.isOverDate == 0">
            and date_format(now(), '%y-%m-%d') &lt; t1.best_before_date
        </if>
        order by t1.create_time
        limit #{page.limitIndex}, #{page.pageSize}
    </select>

    <!--
      //添加商品的方法
      public int insertProduct(Product product)
    -->
    <insert id="insertProduct">
        insert into product values
        (
          null, #{storeId}, #{brandId}, #{productName}, #{productCode},
          #{productStock}, #{typeId}, #{unitId},
          #{introduce}, 0, #{inPrice}, #{salePrice}, now(),
          null, #{createBy}, null, #{imgs}, #{productDate}, #{bestBeforeDate}
        )
    </insert>

    <!--
      //根据商品id修改商品的上下架状态
      public int updateStateById(Product product)
    -->
    <update id="updateStateById">
        update product set up_down_state = #{upDownState}
        where product_id = #{productId}
    </update>

    <!--
      //根据商品id删除商品的方法
      public int deleteProductById(Integer productId)
    -->
    <delete id="deleteProductById">
        delete from product where product_id = #{productId}
    </delete>

    <!--
      //根据商品id修改商品的方法
      public int updateProductById(Product product)
    -->
    <update id="updateProductById">
        <!--商品上下架状态、创建时间、创建者字段值不用改-->
        update product
        set store_id         = #{storeId},
            brand_id         = #{brandId},
            product_name     = #{productName},
            product_code      = #{productCode},
            product_stock   = #{productStock},
            type_id          = #{typeId},
            unit_id          = #{unitId},
            introduce        = #{introduce},
            in_price         = #{inPrice},
            sale_price       = #{salePrice},
            update_time      = now(),
            update_by        = #{updateBy},
            imgs             = #{imgs},
            product_date     = #{productDate},
            best_before_date = #{bestBeforeDate}
        where product_id = #{productId}
    </update>

    <!--
      //根据商品id增加商品库存的方法
      public int addInventById(Integer productId, Integer invent)
    -->
    <update id="addInventById">
        update product set
        product_stock = product_stock + #{param2}
        where product_id = #{param1}
    </update>

    <!--
      //根据商品id查询商品的方法
      public Product selectProductById(Integer productId)
    -->
    <select id="selectProductById" resultType="com.warehouse.entity.Product">
        select * from product where product_id = #{productId}
    </select>
</mapper>